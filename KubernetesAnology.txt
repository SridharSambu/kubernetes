Hello everyone, Today session I'm going to explain what is kubernetes in the simplest possible way,
I can think of using an analogy so first I will go through the analogy and then I will explain what each of the components in the analogy corresponds to in the world of kubernetes 
so here is the analogy first 

so  let's say you are a house owner and the house has 10 rooms and you want to rent out three of those rooms through an Airbnb or Vrdo.
 
 so you have two options , you can either put the ad on the website yourself then each time somebody books, you will be the one handing over the keys , you will be the one ensuring  the rooms are cleaned after a guest leaves and you will also be the one checking if all the maintenance stuff is done correctly or not
 so that is one option you have and there is another option, you can also hire somebody to do those things for you .  so let's say you hire
an agent and that agent will take care of all these things. so what you do is you hire an agent and you sign a contract with him and that contract has certain clauses so for example in the contract it can be written that at 

all times three rooms should be available for guests to book 
each room should have two beds 
every time a guest books a room the keys need to be handed over when he is there and 
every time guest leaves the room has to be cleaned and then that's it

 you don't have to worry about it.

The edge it will take care of everything and you also have a phone and whenever you want to check on what's going on,  you can always call the agent.
so now what the agent will do is he has his employees to take care of these requirements.

so let's say he employs three employees to take care of these three rooms,
 so when room one gets booked the employee one ensures that the booking is done properly and room is cleaned and he is there to hand out the
keys note that the bed in a room is the absolute basic entity okay a guest needs at least one bed to stay in a room and now the agent keeps all these information,  for instance information
about the employees the number of rooms the beds and everything inside a notebook , so that notebook is a single source of truth
so whenever he has to check on something he always just look at the notebook and see if the requirements are satisfied or not, also it makes it easier for him to check.
 if an employee is falling sick or not and if he's sick then he will allocate the rooms to some other employees so when a guest books a room online that booking gets redirected to one of the employees
 and then it's up to the employee to ensure the cleaning part is done the keys giving part is done and the guest has a nice time in the house.

one more thing you have an extra clause in the contract with the agent such that in the event of if there is a lot of bookings then he can extend these three rooms or up until ten rooms
because the house has ten rooms, so if there is a lot of requirement then the supply can be extended.
 so far all these things sound simple right so overall what you did was you achieve some sort of automation on your business by employing this agent and then the
agent employs his or employees and then they take care of all the other things. 

and you don't have to worry about anything else so just like the agent and his employees and is already whole ecosystem.
 
we're able to achieve some sort of automation for the house owner similarly kubernetes and its ecosystem
is able to achieve an automation for an application owner so the energy part is over.

I will come to the real-world scenario  so let's say you are an application developer just like the house owner let's start
from the most basic entity that is the bed in a room okay so the bed is the absolute minimum requirement for any
guest  similarly when your application runs it has to run somewhere and it runs in a container, just like no bed is
going to be outside of the house right the bed has to be inside a room similarly a container has to be inside something called a pod.
 so inside the pod your application actually runs and the pods run inside something called nodes or worker nodes

 so these nodes are  actual physical machines 

 just like an employee of the agent  shows that the rooms are functional and the electricity is fine
and water is fine and everything. similarly there is something called a Kubelet inside a node which ensures if the pods running inside it are healthy
or not 
so here the employee can be represent  as the Kubelet and now I will come back to the agent so the agent
corresponds to two different things in  the world of kubernetes Scheuler and Kube controller manager so just like the
agent decides which room should be  assigned to which employee, similarly Kube schedulerr decides which
pod needs to be running in which node and this it does based on what is the requirement and what is the availability
and remember node  is just a machine and pod is something that runs inside 

just like the agent decides what to do if one of them  falls say sick likely he will redirect his tasks to some other employee right he will assign his room to another employee
similarly there is something called Kube Controller manager and this Kube controller manager decides what to do when one of the worker nodes goes down and as I said nodes are basically
machines so  machines can go down anytime and just like the agent writes in his notebook about all these details   there is a data storage for ETCD in kubernetes where all the
configurational data is stored 

so let's say your requirement is there should be three pods running at all times then that's the sort of data that has to be stored in the ETCD  database and that
is the single source of truth.

Just like the agent can communicate with his employees using a phone similarly there are equivalent concepts in kubernetes , there is an entity called API server just like the
agent has his phone similarly each worker node has something called Kube proxy
just like every employee of the agent has his home phone and all these four
things the APi server the ETCD data storage the Kube Controller manager and
the Kube scheduler they constitute the  kubernetes


The contract between you (the house owner) and the agent is equivalent to a deployment in Kubernetes.
 so inside a  deployment which is written in an yaml
file so inside the deployment yaml file  you basically write down things like how
many ports you want ,  resource requirements and then you feed
it to kubernetes and what kubernetes  does is those requirements are always made okay 
so if you said that that has to at least three ports running at all 
times and if one pod goes down  maybe because his corresponding machine went down then it's off to kubernetes to
decide where to shedule the next pod and kubernetes achieves all these automations so that you don't have to
manually do anything

 and remember the  extra clause in the agreement which I mentioned about before about what to do
when there is too much of booking so the equivalent concept in kubernetes is
called auto-scaling so if you enable auto scaling then kubernetes will ensure it puts up more and more pods to serve more and more
requests .

 so your application users here are equivalent to the Airbnb guests in my analogy so if lots of users try to
use your application at the same time then if you have turned on the auto scaling then kubernetes will scale
accordingly by putting more pods and this is something that can also be
configured based on your scaling requirement so you may want to scale
based on number of ports you may also want to increase the resources of each port my resources here I mean the CPU
and the memory usage.  and of course you
have to put some sort of CAP in the
auto scaling because you know you can't arbitrarily increase your resources
because you don't have infinite amount of money right just like the house has only ten rooms so it can only upload it
10 requests at max.

so this is a very brief overview of kubernetes using a real world analogy there are plenty of
other concepts that need to be covered as well but this should give you an decent starting point if you are an
absolute beginner.


https://opensource.com/article/20/7/kubernetes-analogy#:~:text=The%20contract%20between%20you%20(the,you%20need%2C%20and%20so%20on.
